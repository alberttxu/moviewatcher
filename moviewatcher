#!/usr/bin/env python3

# Customize
# watch for files with the following extensions
extensions = [".tif", ".tiff", ".mrcs"]

import argparse
import os
import subprocess
import sys
import time

# flags
parser = argparse.ArgumentParser(description="")
parser.add_argument("-c", "--command",
                    help="command file",
                    required=False)
parser.add_argument("-d", "--dest",
                    help="destination folder of processed files",
                    required=True)
parser.add_argument("-ext", "--extension",
                    help="primary extension; if specified, the default "
                    "'.tif', '.tiff', and '.mrcs' extensions will be disabled",
                    required=False)

# globals
flags = vars(parser.parse_args())
dest_dir = flags["dest"]
if dest_dir[-1] == "/":
    dest_dir = dest_dir[:-1]
if flags["command"]:
    with open(flags["command"]) as commandfile:
        unparsed_command = commandfile.read()
if flags["extension"]:
    extensions.append(flags["extension"])

# helper functions
def wait_until_done_growing(filename):
    size = os.path.getsize(filename)
    while size == 0:
        time.sleep(1)
        size = os.path.getsize(filename)
    time.sleep(0.5)
    while os.path.getsize(filename) - size:
        size = os.path.getsize(filename)
        time.sleep(1)

def parse_commandfile(filename, ext):
    if not flags["command"]:
        return ""
    basename = filename[:filename.rfind(ext)]
    # read parameters from file
    command = unparsed_command.replace("(filename)", filename)
    command = command.replace("(basename)", basename)
    command = command.replace("(dest)", dest_dir)
    print(command)
    return command

def process_file(filename):
    if filename[:2] == "./":
        filename = filename[2:]
    if flags["extension"]:
        ext = filename[filename.rfind(flags["extension"]):]
    else:
        ext = os.path.splitext(filename)[1]

    if ext in extensions:
        wait_until_done_growing(filename)
        start = time.time()
        print("started processing %s" % filename)
        if subprocess.call(parse_commandfile(filename, ext), shell=True):
            print("Error from command file, exiting...")
            raise KeyboardInterrupt
        else:
            end = time.time()
            print("finished processing %s in %.3fs" % (filename, end - start))
            print("moving %s to %s" % (filename, dest_dir))
            subprocess.call("mv %s %s" % (filename, dest_dir), shell=True)


if __name__ == "__main__":
    if not os.path.isdir(dest_dir):
        print("directory %s does not exist" % dest_dir)
        print("creating directory %s" % dest_dir)
        if subprocess.call("mkdir %s" % dest_dir, shell=True):
            print("error creating directory")
            sys.exit()
    print("destination folder: %s" % dest_dir)

    try:
        while True:
            # process existing files in current working directory
            for filename in sorted(os.listdir(".")):
                process_file(filename)
            time.sleep(1)
    except KeyboardInterrupt:
        pass

